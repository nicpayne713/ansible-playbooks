- name: check is zsh installed
  shell: command -v zsh
  register: zsh_exists
  ignore_errors: yes
  tags: &tags_for_zsh_tasks [ 'install', 'productivity', 'dotfiles', 'zsh' ]

- name: Install ZSH
  when: zsh_exists is failed
  apt: name=zsh
  tags: *tags_for_zsh_tasks

- name: Change shell to zsh
  # shell: chsh -s $(which zsh)
  shell: sudo usermod --shell /usr/bin/zsh nic
  tags: *tags_for_zsh_tasks

- name: Check if oh-my-zsh is installed
  stat:
    path: "{{ lookup('env', 'HOME') }}/.oh-my-zsh"
  register: ohmyzsh_path
  tags: *tags_for_zsh_tasks

# - name: Check if oh-my-zsh is installed at root
#   stat:
#     path: "/root/.oh-my-zsh"
#   register: ohmyzsh_root_path
#   tags: *tags_for_zsh_tasks

- name: Oh-My-Zsh
  shell: sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" --unattended
  # when: ohmyzsh_path.stat.islnk is not defined and ohmyzsh_root_path.stat.islnk is not defined
  when: ohmyzsh_path.stat.islnk is not defined
  tags: *tags_for_zsh_tasks
  become_user: nic 

- name: Check if zsh-autosuggestions is installed
  stat:
    path: "{{ lookup('env', 'HOME') }}/.zsh/plugins/zsh-autosuggestions"
  register: zshautosuggestions_path
  tags: *tags_for_zsh_tasks

- name: Install zsh-autosuggestions
  when: zshautosuggestions_path.stat.islnk is not defined
  tags: *tags_for_zsh_tasks
  ansible.builtin.git:
    repo: 'https://github.com/zsh-users/zsh-autosuggestions.git'
    dest: "{{ lookup('env', 'HOME') }}/.zsh/plugins/zsh-autosuggestions"

- name: Check if zsh-history-substring-search is installed
  tags: *tags_for_zsh_tasks
  stat:
    path: "{{ lookup('env', 'HOME') }}/.zsh/plugins/zsh-history-substring-search"
  register: zsh_history_substring_search_path

- name: Install zsh-history-substring-search
  tags: *tags_for_zsh_tasks
  when: zsh_history_substring_search_path.stat.islnk is not defined
  ansible.builtin.git:
    repo: 'https://github.com/zsh-users/zsh-history-substring-search.git'
    dest: "{{ lookup('env', 'HOME') }}/.zsh/plugins/zsh-history-substring-search"

- name: Check if zsh-syntax-highlighting is installed
  tags: *tags_for_zsh_tasks
  stat:
    path: "{{ lookup('env', 'HOME') }}/.zsh/plugins/zsh-syntax-highlighting"
  register: zsh_syntax_highlighting_exists

- name: Install zsh-syntax-highlighting
  tags: *tags_for_zsh_tasks
  when: zsh_syntax_highlighting_exists is failed
  ansible.builtin.git:
    repo: 'https://github.com/zsh-users/zsh-syntax-highlighting.git'
    dest: "{{ lookup('env', 'HOME') }}/.zsh/plugins/zsh-syntax-highlighting"

- name: check is starship installed
  shell: command -v starship
  register: starship_exists
  ignore_errors: yes
  tags: *tags_for_zsh_tasks

- name: Install Starship
  when: starship_exists is failed
  tags: *tags_for_zsh_tasks
  shell: |
    curl -fsSL https://starship.rs/install.sh | sh -s -- -y
    # cat ~/.bashrc | grep -q 'eval "$(starship init bash)"' || echo 'eval "$(starship init bash)"' >> ~/.bashrc
    # cat ~/.zshrc | grep -q 'eval "$(starship init zsh)"' || echo 'eval "$(starship init zsh)"' >> ~/.zshrc
- name: Check if forgit is installed
  stat:
    path: "{{ lookup('env', 'HOME') }}/.forgit"
  register: forgit_exists
  tags: *tags_for_zsh_tasks

- name: check is glow installed
  shell: command -v glow
  register: glow_exists
  ignore_errors: yes
  tags: *tags_for_zsh_tasks

- name: Install Glow
  when: glow_exists is failed
  shell: |
    GLOW_VERSION=$(curl --silent https://github.com/charmbracelet/glow/releases/latest | tr -d '"' | sed 's/^.*tag\///g' | sed 's/>.*$//g' | sed 's/^v//') && 
    wget https://github.com/charmbracelet/glow/releases/download/v${GLOW_VERSION}/glow_${GLOW_VERSION}_linux_x86_64.tar.gz -O- -q | tar -zxf - -C ~/.local/bin
  tags: *tags_for_zsh_tasks
 

- name: check is gitui installed
  shell: command -v gitui
  register: gitui_exists
  ignore_errors: yes
  tags: *tags_for_zsh_tasks

- name: Install GitUI
  when: gitui_exists is failed
  shell: |
    GITUI_VERSION=$(curl --silent https://github.com/extrawurst/gitui/releases/latest | tr -d '"' | sed 's/^.*tag\///g' | sed 's/>.*$//g' | sed 's/^v//')
    wget https://github.com/extrawurst/gitui/releases/download/v${GITUI_VERSION}/gitui-linux-musl.tar.gz -O- -q | tar -zxf - -C ~/.local/bin
  tags: *tags_for_zsh_tasks

- name: check is rg installed
  shell: command -v rg
  register: rg_exists
  ignore_errors: yes
  tags: *tags_for_zsh_tasks

- name: Install ripgrep
  when: rg_exists is failed
  shell: | 
    RIPGREP_VERSION=$(curl --silent https://github.com/BurntSushi/ripgrep/releases/latest | tr -d '"' | sed 's/^.*tag\///g' | sed 's/>.*$//g' | sed 's/^v//')
    wget https://github.com/BurntSushi/ripgrep/releases/download/${RIPGREP_VERSION}/ripgrep-${RIPGREP_VERSION}-x86_64-unknown-linux-musl.tar.gz -O- -q | tar -zxf - -C /tmp
    cp /tmp/ripgrep-${RIPGREP_VERSION}-x86_64-unknown-linux-musl/rg {{ lookup('env', 'HOME') }}/.local/bin/
  tags: *tags_for_zsh_tasks

- name: check is dust installed
  shell: command -v dust
  register: dust_exists
  ignore_errors: yes
  tags: *tags_for_zsh_tasks

- name: uninstall dust
  when: dust_exists is successful
  shell: rm `which dust`
  tags: 
    - never
    - uninstall-dust


- name: Install dust
  when: dust_exists is failed
  shell: | 
    DUST_VERSION=$(curl --silent https://github.com/bootandy/dust/releases/latest | tr -d '"' | sed 's/^.*tag\///g' | sed 's/>.*$//g' | sed 's/^v//')
    wget https://github.com/bootandy/dust/releases/download/v${DUST_VERSION}/dust-v${DUST_VERSION}-x86_64-unknown-linux-musl.tar.gz -O- -q | tar -zxf - -C /tmp
    cp /tmp/dust-v${DUST_VERSION}-x86_64-unknown-linux-musl/dust {{ lookup('env', 'HOME') }}/.local/bin/
  tags: *tags_for_zsh_tasks

- name: check is tmux installed
  shell: command -v tmux
  register: tmux_exists
  ignore_errors: yes
  tags: *tags_for_zsh_tasks

- name: Install tmux
  when: tmux_exists is failed
  become_user: root
  shell: |
    TMUX_VERSION=$(curl --silent https://github.com/tmux/tmux/releases/latest | tr -d '"' | sed 's/^.*tag\///g' | sed 's/>.*$//g' | sed 's/^v//')
    wget https://github.com/tmux/tmux/releases/download/${TMUX_VERSION}/tmux-${TMUX_VERSION}.tar.gz -O- -q | tar -zxf - -C /tmp
    cd /tmp/tmux-${TMUX_VERSION}
    sudo ./configure
    sudo make
    sudo make install
  tags: *tags_for_zsh_tasks

- name: check is mdp installed
  shell: command -v mdp
  register: mdp_exists
  ignore_errors: yes
  tags: *tags_for_zsh_tasks

- name: Install mdp
  when: mdp_exists is failed
  shell: |
    cd {{ lookup('env', 'HOME') }}/third-party/
    git clone https://github.com/visit1985/mdp.git
    cd mdp
    make
    make install PREFIX="{{ lookup('env', 'HOME') }}/.local/bin"
  tags: *tags_for_zsh_tasks

- name: check is fzf installed
  shell: command -v fzf
  register: fzf_exists
  ignore_errors: yes
  tags: *tags_for_zsh_tasks

- name: Install fzf
  when: fzf_exists is failed
  shell: |
        git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf && \
        ~/.fzf/install --all
        cp {{ lookup('env', 'HOME') }}/.fzf/bin/fzf {{ lookup('env', 'HOME') }}/.local/bin
  tags: *tags_for_zsh_tasks

- name: check is vifm installed
  shell: command -v vifm
  register: vifm_exists
  ignore_errors: yes
  tags: *tags_for_zsh_tasks

- name: Install vifm
  when: vifm_exists is failed
  shell: | 
    VIFM_VERSION=$(curl --silent https://github.com/vifm/vifm/releases/latest | tr -d '"' | sed 's/^.*tag\///g' | sed 's/>.*$//g' | sed 's/^v//')
    wget https://github.com/vifm/vifm/releases/download/v${VIFM_VERSION}/vifm-v${VIFM_VERSION}-x86_64.AppImage -O {{ lookup('env', 'HOME') }}/.local/bin/vifm
    chmod +x {{ lookup('env', 'HOME') }}/.local/bin/vifm
  tags: *tags_for_zsh_tasks

- name: check is lf installed
  shell: command -v lf
  register: lf_exists
  ignore_errors: yes
  tags: *tags_for_zsh_tasks

- name: Install lf
  when: lf_exists is failed
  shell: | 
    LF_VERSION=$(curl --silent https://github.com/gokcehan/lf/releases/latest | tr -d '"' | sed 's/^.*tag\///g' | sed 's/>.*$//g' | sed 's/^v//')
    wget https://github.com/gokcehan/lf/releases/download/${LF_VERSION}/lf-linux-amd64.tar.gz -O- -q | tar -zxf - -C {{ lookup('env', 'HOME') }}/.local/bin/
  tags: *tags_for_zsh_tasks

- name: include ANSIBLE_LOCALHOST_WARNING in profile
  lineinfile:
    dest: "{{ lookup('env', 'HOME') }}/.profile"
    line: export ANSIBLE_LOCALHOST_WARNING=False
    regexp: "^export ANSIBLE_LOCALHOST_WARNING"
    state: presentd
