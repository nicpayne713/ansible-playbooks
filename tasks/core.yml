- name: Install System Packages 1 (terminal)
  become: true
  apt:
    name: 
      - build-essential
      - ccache
      - cifs-utils
      - cmake
      - curl
      - dconf-editor
      - direnv
      - ffmpeg
      - gettext
      - golang
      - htop
      - libevent-dev
      - libncurses5-dev
      - libncursesw5-dev
      - libpthread-stubs0-dev
      - libtool
      - libtool-bin
      - lm-sensors
      - lsof
      - lua5.1
      - neofetch
      - ninja-build
      - pkg-config
      - virtualenv
      - python3-dev
      - python3-pip
      - python3-venv
      - rename
      - silversearcher-ag
      - stow
      - tar
      - tree
      - unzip
      - webp
      - wget
  tags:
    - install
    - terminal
    - neovim
    - nvim
    - core
    
# - name: check is fd installed
#   shell: command -v fd
#   register: fd_exists
#   ignore_errors: yes

# - name: install fd
#   shell: . ~/.profile && nix-env -iA nixpkgs.fd
#
- name: add ~/.local
  shell: mkdir ~/.local
  ignore_errors: yes

- name: add ~/.local/bin
  shell: mkdir ~/.local/bin
  ignore_errors: yes

- name: Add to system-wide $PATH.
  become: true
  copy:
    dest: /etc/profile.d/custom-path.sh
    content: 'export "PATH=$PATH:~/.pyenv/bin:~/.local/bin"'

- name: pyenv init
  shell: eval "$(. ~/.pyenv/.pyenvrc && pyenv init -)"

- name: check is pipx installed
  shell: command -v pipx
  register: pipx_exists
  ignore_errors: yes

    # make sure pipx gets on PATH somehow?

- name: pipx
  when: pipx_exists is failed
  pip:
    name: pipx
  tags:
    - pipx

- name: ensure fonts directory
  file:
    path: "{{ lookup('env', 'HOME') }}/.fonts"
    state: directory

- name: Hack exists
  shell: "ls {{ lookup('env', 'HOME') }}/.fonts/Hack*Nerd*Font*Complete*"
  register: hack_exists
  ignore_errors: yes

- name: Download Hack
  when: hack_exists is failed
  ansible.builtin.unarchive:
    src: https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/Hack.zip
    dest: "{{ lookup('env', 'HOME') }}/.fonts/"
    remote_src: yes
  # pip:
# - name: pipx ensurepath
  # shell: pipx ensurepath
  # tags:
  #   - pipx

- name: Check if Homebrew is already installed
  stat:
    path: brew 
  register: b
  tags:
    - install
    - brew
    - homebrew

- name: Install Homebrew
  shell: |
    echo "Doing the thing!"
    export CI=1
    export NONINTERACTIVE=1
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  when: not b.stat.exists
  tags:
    - install
    - brew
    - homebrew

- name: Install copier
  shell: ~/.local/bin/pipx install --pip-args pre copier --force
  tags:
    - copier
    - install
